{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hala-\\\\Downloads\\\\react-api-project-main (1)\\\\react-api-project-main\\\\api-demo\\\\src\\\\components\\\\CountryList.jsx\",\n  _s = $RefreshSig$();\n// Import necessary dependencies from React and other libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../styles/countryList.css';\n\n// Main component for displaying and managing the country list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryList = () => {\n  _s();\n  // State for storing all countries from the API\n  const [countries, setCountries] = useState([]);\n  // State for storing the search term\n  const [search, setSearch] = useState('');\n  // State for storing the selected continent filter\n  const [selectedContinent, setSelectedContinent] = useState('all');\n\n  // Array of available continents for filtering\n  const continents = ['all', 'Africa', 'Americas',\n  // hört sich komisch an, in der API ist Amercia aber als \"Americas\" bezeichnet, also müssen wir übereinstimmen.\n  'Asia', 'Europe', 'Oceania'];\n\n  // Effect hook to fetch countries data when component mounts\n  useEffect(() => {\n    // Make GET request to REST Countries API\n    axios.get('https://restcountries.com/v3.1/all').then(response => {\n      //response axios variabel\n      // Store the fetched data in state\n      setCountries(response.data); //repsonse.date ist das Array mit den Ländern\n    }).catch(error => {\n      // Handle any errors during the API call\n      console.error('Problem while fetching country info:', error);\n    });\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  // Filter function that combines search term and continent filtering\n  const filteredCountries = countries.filter(country => {\n    // Check if country name matches search term (case insensitive)\n    const matchesSearch = country.name.common.toLowerCase().includes(search.toLowerCase());\n    // Check if country belongs to selected continent or if 'all' is selected\n    const matchesContinent = selectedContinent === 'all' || country.region === selectedContinent;\n    // Return true only if both conditions are met\n    return matchesSearch && matchesContinent;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"head\",\n      children: \"The World\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"search for...\",\n        value: search,\n        onChange: e => setSearch(e.target.value),\n        className: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedContinent,\n        onChange: e => setSelectedContinent(e.target.value),\n        className: \"filter-select\",\n        children: continents.map(continent => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: continent,\n          children: continent === 'all' ? 'All continents' : continent\n        }, continent, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"country-list\",\n      children: filteredCountries.map(country => {\n        var _country$capital;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"country-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"country-name\",\n            children: country.name.common\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"capital\",\n            children: ((_country$capital = country.capital) === null || _country$capital === void 0 ? void 0 : _country$capital[0]) || 'Keine Angabe'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, country.cca3, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryList, \"s5aIq4K9c2gtuAR6DMruxQ/M9MI=\");\n_c = CountryList;\nexport default CountryList;\nvar _c;\n$RefreshReg$(_c, \"CountryList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","CountryList","_s","countries","setCountries","search","setSearch","selectedContinent","setSelectedContinent","continents","get","then","response","data","catch","error","console","filteredCountries","filter","country","matchesSearch","name","common","toLowerCase","includes","matchesContinent","region","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","continent","_country$capital","capital","cca3","_c","$RefreshReg$"],"sources":["C:/Users/hala-/Downloads/react-api-project-main (1)/react-api-project-main/api-demo/src/components/CountryList.jsx"],"sourcesContent":["// Import necessary dependencies from React and other libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../styles/countryList.css';\n\n// Main component for displaying and managing the country list\nconst CountryList = () => {\n  // State for storing all countries from the API\n  const [countries, setCountries] = useState([]);\n  // State for storing the search term\n  const [search, setSearch] = useState('');\n  // State for storing the selected continent filter\n  const [selectedContinent, setSelectedContinent] = useState('all');\n\n  // Array of available continents for filtering\n  const continents = [\n    'all',\n    'Africa',\n    'Americas', // hört sich komisch an, in der API ist Amercia aber als \"Americas\" bezeichnet, also müssen wir übereinstimmen.\n    'Asia',\n    'Europe',\n    'Oceania',\n  ];\n\n  // Effect hook to fetch countries data when component mounts\n  useEffect(() => {\n    // Make GET request to REST Countries API\n    axios.get('https://restcountries.com/v3.1/all')\n      .then(response => { //response axios variabel\n        // Store the fetched data in state\n        setCountries(response.data); //repsonse.date ist das Array mit den Ländern\n      })\n      .catch(error => {\n        // Handle any errors during the API call\n        console.error('Problem while fetching country info:', error);\n      });\n  }, []); // Empty dependency array means this effect runs only once on mount\n\n  // Filter function that combines search term and continent filtering\n  const filteredCountries = countries.filter(\n    country => {\n    // Check if country name matches search term (case insensitive)\n    const matchesSearch = country.name.common\n      .toLowerCase()\n      .includes(search.toLowerCase());\n    // Check if country belongs to selected continent or if 'all' is selected\n    const matchesContinent = selectedContinent === 'all' || \n      country.region === selectedContinent;\n    // Return true only if both conditions are met\n    return matchesSearch && matchesContinent;\n  });\n\n  return (\n    <div className=\"box\">\n      <h1 className=\"head\">The World</h1>\n      \n      {/* Filter container for search input and continent selector */}\n      <div className=\"filter-container\">\n        {/* Search input field */}\n        <input\n          type=\"text\"\n          placeholder=\"search for...\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          className=\"search\"\n        />\n        \n        {/* Continent selector dropdown */}\n        <select\n          value={selectedContinent}\n          onChange={(e) => setSelectedContinent(e.target.value)}\n          className=\"filter-select\"\n        >\n          {/* Map through continents array to create options */}\n          {continents.map(continent => (\n            <option key={continent} value={continent}>\n              {continent === 'all' ? 'All continents' : continent}\n            </option>\n          ))}\n        </select>\n      </div>\n      \n      {/* List of filtered countries */}\n      <ul className=\"country-list\">\n        {filteredCountries.map((country) => (\n          <li key={country.cca3} className=\"country-item\">\n            {/* Display country name */}\n            <span className=\"country-name\">{country.name.common}</span>\n            {/* Display capital city with fallback for countries without capital */}\n            <span className=\"capital\">\n              {country.capital?.[0] || 'Keine Angabe'}\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CountryList;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}